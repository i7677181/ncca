//----------------------------------------------------------------------------------------------------------------------
/// @file NGLScene.h
/// @brief a basic Qt GL window class for creating a swarming simulation
/// @class NGLScene
/// @brief this class draws all elements for the swarming simulation
//----------------------------------------------------------------------------------------------------------------------
#ifndef NGLScene_H
#define NGLScene_H
#include <ngl/Camera.h>
#include <ngl/Transformation.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/ShaderLib.h>
#include <ngl/VAOPrimitives.h>
#include <QEvent>
#include <QResizeEvent>
#include <QGLWidget>
#include <ngl/Text.h>
#include <QtOpenGL>
#include <Swarm.h>


class NGLScene : public QGLWidget
{
  Q_OBJECT        // must include this if you use Qt signals/slots
public :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Constructor for NGLScene
  /// @param [in] _parent the parent window to create the GL context in
  //----------------------------------------------------------------------------------------------------------------------
  NGLScene(QWidget *_parent );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief dtor
  //----------------------------------------------------------------------------------------------------------------------
  ~NGLScene();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief This method is called to create a new swarm
  /// @param[in] _numBoids the numder of boinds in the new swarm
  /// @param[in] _cohesion the cohesion weight to set to each boid
  /// @param[in] _separation the separation weight to set to each boid
  /// @param[in] _alignment the alignment weight to set to each boid
  /// @param[in] _speed the speed value to set to each boid
  /// @param[in] _mass the mass value to set to each boid
  void newSwarm(int _numBoids, int _cohesion, int _separation, int _alignment, float _speed, int _mass);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief A method to add a boid to the swarm
  /// @param[in] _cohesion the cohesion weight to set
  /// @param[in] _separation the separation weight to set
  /// @param[in] _alignment the alignment weight to set
  /// @param[in] _speed the speed value to set
  /// @param[in] _mass the mass value to set
  void createSwarm(int _cohesion, int _separation, int _alignment, float _speed, int _mass);

public slots :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief A slot to remove a boid
  void removeBoid();
  /// @brief A slot to set cohesion weight
  /// @param[in] _cohesion the value to set
  void setCohesion(int _cohesion);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief A slot to set separation
  /// @param[in] _separation the value to set
  void setSeparation(int _separation);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief A slot to set alignment
  /// @param[in] _align the value to set
  void setAlignment(int _align);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief A slot to set speed
  /// @param[in] _speed the value to set
  void setSpeed(int _speed);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief A slot to set mass
  /// @param[in] _mass the value to set
  //----------------------------------------------------------------------------------------------------------------------
  void setMass(int _mass);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief A slot to set the separation distance for the separation method
  //----------------------------------------------------------------------------------------------------------------------
  void setSepDist(int _sepDist);
  //----------------------------------------------------------------------------------------------------------------------
protected :
   //----------------------------------------------------------------------------------------------------------------------
  /// @brief  The following methods must be implimented in the sub class
  /// this is called when the window is created
  /// //-------------------------------------------------------------------------------------------------------------------
  void initializeGL();
  /// @brief this is called whenever the window is re-sized
  /// @param[in] _w the width of the resized window
  /// @param[in] _h the height of the resized window
  void resizeGL(const int _w, const int _h );
  /// @brief this is the main gl drawing routine which is called whenever the window needs to
  // be re-drawn
  //----------------------------------------------------------------------------------------------------------------------
  void paintGL();

private :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ptr to our Swarm containing the swarm
  //----------------------------------------------------------------------------------------------------------------------
  Swarm *m_Swarm;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a container for our Cameras
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Camera m_camera;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the x rotation mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_spinXFace;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the y rotation mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_spinYFace;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to indicate if the mouse button is pressed when dragging
  //----------------------------------------------------------------------------------------------------------------------
  bool m_rotate;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to indicate if the Right mouse button is pressed when dragging
  //----------------------------------------------------------------------------------------------------------------------
  bool m_translate;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous x mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_origX;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous y mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_origY;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous x mouse value for Position changes
  //----------------------------------------------------------------------------------------------------------------------
  int m_origXPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous y mouse value for Position changes
  //----------------------------------------------------------------------------------------------------------------------
  int m_origYPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the global mouse transforms
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Mat4 m_mouseGlobalTX;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the model position for mouse movement
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_modelPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The light
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Light *m_light;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief our transform for objects
  ngl::Transformation m_transform;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief load required matrices to the shader program
  //----------------------------------------------------------------------------------------------------------------------
  void loadMatricesToShader();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Qt Event called when a key is pressed
  /// @param [in] _event the Qt event to query for size etc
  //----------------------------------------------------------------------------------------------------------------------
  void keyPressEvent(QKeyEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called every time a mouse is moved
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mouseMoveEvent (QMouseEvent * _event );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse button is pressed
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mousePressEvent ( QMouseEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse button is released
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mouseReleaseEvent ( QMouseEvent *_event );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse wheel is moved
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void wheelEvent( QWheelEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime there is a qttimer Event.
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void timerEvent(QTimerEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Vertex Array Object for the boid
  //----------------------------------------------------------------------------------------------------------------------
  ngl::VertexArrayObject *m_boidVAO;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a method to build the boid vao
  //----------------------------------------------------------------------------------------------------------------------
  void buildBoidVAO();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to draw the boid VAO
  //----------------------------------------------------------------------------------------------------------------------
  void drawBoid();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to create and set up the cameras for the scene
  //----------------------------------------------------------------------------------------------------------------------
  void Camera();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the height in pixels of the window
  //----------------------------------------------------------------------------------------------------------------------
  int m_height;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the width in pixels of the window
  //----------------------------------------------------------------------------------------------------------------------
  int m_width;



};

#endif
